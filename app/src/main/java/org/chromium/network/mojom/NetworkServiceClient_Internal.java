
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_service.mojom
//

package org.chromium.network.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class NetworkServiceClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<NetworkServiceClient, NetworkServiceClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<NetworkServiceClient, NetworkServiceClient.Proxy>() {
    
        @Override
        public String getName() {
            return "network::mojom::NetworkServiceClient";
        }
    
        @Override
        public int getVersion() {
          return 0;
        }
    
        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, NetworkServiceClient impl) {
            return new Stub(core, impl);
        }
    
        @Override
        public NetworkServiceClient[] buildArray(int size) {
          return new NetworkServiceClient[size];
        }
    };


    private static final int ON_AUTH_REQUIRED_ORDINAL = 0;

    private static final int ON_CERTIFICATE_REQUESTED_ORDINAL = 1;

    private static final int ON_SSL_CERTIFICATE_ERROR_ORDINAL = 2;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements NetworkServiceClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onAuthRequired(
int processId, int routingId, org.chromium.url.mojom.Url url, boolean firstAuthAttempt, AuthChallengeInfo authInfo, 
OnAuthRequiredResponse callback) {

            NetworkServiceClientOnAuthRequiredParams _message = new NetworkServiceClientOnAuthRequiredParams();

            _message.processId = processId;

            _message.routingId = routingId;

            _message.url = url;

            _message.firstAuthAttempt = firstAuthAttempt;

            _message.authInfo = authInfo;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_AUTH_REQUIRED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceClientOnAuthRequiredResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onCertificateRequested(
int processId, int routingId, SslCertRequestInfo certInfo, 
OnCertificateRequestedResponse callback) {

            NetworkServiceClientOnCertificateRequestedParams _message = new NetworkServiceClientOnCertificateRequestedParams();

            _message.processId = processId;

            _message.routingId = routingId;

            _message.certInfo = certInfo;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CERTIFICATE_REQUESTED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceClientOnCertificateRequestedResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onSslCertificateError(
int resourceType, org.chromium.url.mojom.Url url, int processId, int routingId, SslInfo sslInfo, boolean fatal, 
OnSslCertificateErrorResponse callback) {

            NetworkServiceClientOnSslCertificateErrorParams _message = new NetworkServiceClientOnSslCertificateErrorParams();

            _message.resourceType = resourceType;

            _message.url = url;

            _message.processId = processId;

            _message.routingId = routingId;

            _message.sslInfo = sslInfo;

            _message.fatal = fatal;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new NetworkServiceClientOnSslCertificateErrorResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<NetworkServiceClient> {

        Stub(org.chromium.mojo.system.Core core, NetworkServiceClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                NetworkServiceClient_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), NetworkServiceClient_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
                    case ON_AUTH_REQUIRED_ORDINAL: {
            
                        NetworkServiceClientOnAuthRequiredParams data =
                                NetworkServiceClientOnAuthRequiredParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onAuthRequired(data.processId, data.routingId, data.url, data.firstAuthAttempt, data.authInfo, new NetworkServiceClientOnAuthRequiredResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case ON_CERTIFICATE_REQUESTED_ORDINAL: {
            
                        NetworkServiceClientOnCertificateRequestedParams data =
                                NetworkServiceClientOnCertificateRequestedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onCertificateRequested(data.processId, data.routingId, data.certInfo, new NetworkServiceClientOnCertificateRequestedResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
            
            
            
            
            
                    case ON_SSL_CERTIFICATE_ERROR_ORDINAL: {
            
                        NetworkServiceClientOnSslCertificateErrorParams data =
                                NetworkServiceClientOnSslCertificateErrorParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onSslCertificateError(data.resourceType, data.url, data.processId, data.routingId, data.sslInfo, data.fatal, new NetworkServiceClientOnSslCertificateErrorResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class NetworkServiceClientOnAuthRequiredParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public int routingId;
        public org.chromium.url.mojom.Url url;
        public boolean firstAuthAttempt;
        public AuthChallengeInfo authInfo;
    
        private NetworkServiceClientOnAuthRequiredParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnAuthRequiredParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnAuthRequiredParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnAuthRequiredParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnAuthRequiredParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnAuthRequiredParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnAuthRequiredParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.processId = decoder0.readInt(8);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.routingId = decoder0.readInt(12);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.firstAuthAttempt = decoder0.readBoolean(24, 0);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.authInfo = AuthChallengeInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.routingId, 12);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.firstAuthAttempt, 24, 0);
            
            encoder0.encode(this.authInfo, 32, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnAuthRequiredParams other = (NetworkServiceClientOnAuthRequiredParams) object;
            if (this.processId!= other.processId)
                return false;
            if (this.routingId!= other.routingId)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url))
                return false;
            if (this.firstAuthAttempt!= other.firstAuthAttempt)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.authInfo, other.authInfo))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.processId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.routingId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.url);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.firstAuthAttempt);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.authInfo);
            return result;
        }
    }



    
    static final class NetworkServiceClientOnAuthRequiredResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public AuthCredentials credentials;
    
        private NetworkServiceClientOnAuthRequiredResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnAuthRequiredResponseParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnAuthRequiredResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnAuthRequiredResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnAuthRequiredResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnAuthRequiredResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnAuthRequiredResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.credentials = AuthCredentials.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.credentials, 8, true);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnAuthRequiredResponseParams other = (NetworkServiceClientOnAuthRequiredResponseParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.credentials, other.credentials))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.credentials);
            return result;
        }
    }

    static class NetworkServiceClientOnAuthRequiredResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkServiceClient.OnAuthRequiredResponse mCallback;

        NetworkServiceClientOnAuthRequiredResponseParamsForwardToCallback(NetworkServiceClient.OnAuthRequiredResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_AUTH_REQUIRED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkServiceClientOnAuthRequiredResponseParams response = NetworkServiceClientOnAuthRequiredResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.credentials);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceClientOnAuthRequiredResponseParamsProxyToResponder implements NetworkServiceClient.OnAuthRequiredResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceClientOnAuthRequiredResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(AuthCredentials credentials) {
            NetworkServiceClientOnAuthRequiredResponseParams _response = new NetworkServiceClientOnAuthRequiredResponseParams();

            _response.credentials = credentials;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_AUTH_REQUIRED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceClientOnCertificateRequestedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int processId;
        public int routingId;
        public SslCertRequestInfo certInfo;
    
        private NetworkServiceClientOnCertificateRequestedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnCertificateRequestedParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnCertificateRequestedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnCertificateRequestedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnCertificateRequestedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnCertificateRequestedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnCertificateRequestedParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.processId = decoder0.readInt(8);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.routingId = decoder0.readInt(12);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.certInfo = SslCertRequestInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.processId, 8);
            
            encoder0.encode(this.routingId, 12);
            
            encoder0.encode(this.certInfo, 16, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnCertificateRequestedParams other = (NetworkServiceClientOnCertificateRequestedParams) object;
            if (this.processId!= other.processId)
                return false;
            if (this.routingId!= other.routingId)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.certInfo, other.certInfo))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.processId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.routingId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.certInfo);
            return result;
        }
    }



    
    static final class NetworkServiceClientOnCertificateRequestedResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public X509Certificate x509Certificate;
        public short[] algorithmPreferences;
        public SslPrivateKey sslPrivateKey;
        public boolean cancelCertificateSelection;
    
        private NetworkServiceClientOnCertificateRequestedResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnCertificateRequestedResponseParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnCertificateRequestedResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnCertificateRequestedResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnCertificateRequestedResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnCertificateRequestedResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnCertificateRequestedResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.x509Certificate = X509Certificate.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.algorithmPreferences = decoder0.readShorts(16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.sslPrivateKey = decoder0.readServiceInterface(24, false, SslPrivateKey.MANAGER);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.cancelCertificateSelection = decoder0.readBoolean(32, 0);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.x509Certificate, 8, false);
            
            encoder0.encode(this.algorithmPreferences, 16, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
            
            encoder0.encode(this.sslPrivateKey, 24, false, SslPrivateKey.MANAGER);
            
            encoder0.encode(this.cancelCertificateSelection, 32, 0);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnCertificateRequestedResponseParams other = (NetworkServiceClientOnCertificateRequestedResponseParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.x509Certificate, other.x509Certificate))
                return false;
            if (!java.util.Arrays.equals(this.algorithmPreferences, other.algorithmPreferences))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sslPrivateKey, other.sslPrivateKey))
                return false;
            if (this.cancelCertificateSelection!= other.cancelCertificateSelection)
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.x509Certificate);
            result = prime * result + java.util.Arrays.hashCode(this.algorithmPreferences);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.sslPrivateKey);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.cancelCertificateSelection);
            return result;
        }
    }

    static class NetworkServiceClientOnCertificateRequestedResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkServiceClient.OnCertificateRequestedResponse mCallback;

        NetworkServiceClientOnCertificateRequestedResponseParamsForwardToCallback(NetworkServiceClient.OnCertificateRequestedResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_CERTIFICATE_REQUESTED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkServiceClientOnCertificateRequestedResponseParams response = NetworkServiceClientOnCertificateRequestedResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.x509Certificate, response.algorithmPreferences, response.sslPrivateKey, response.cancelCertificateSelection);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceClientOnCertificateRequestedResponseParamsProxyToResponder implements NetworkServiceClient.OnCertificateRequestedResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceClientOnCertificateRequestedResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(X509Certificate x509Certificate, short[] algorithmPreferences, SslPrivateKey sslPrivateKey, Boolean cancelCertificateSelection) {
            NetworkServiceClientOnCertificateRequestedResponseParams _response = new NetworkServiceClientOnCertificateRequestedResponseParams();

            _response.x509Certificate = x509Certificate;

            _response.algorithmPreferences = algorithmPreferences;

            _response.sslPrivateKey = sslPrivateKey;

            _response.cancelCertificateSelection = cancelCertificateSelection;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_CERTIFICATE_REQUESTED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class NetworkServiceClientOnSslCertificateErrorParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int resourceType;
        public org.chromium.url.mojom.Url url;
        public int processId;
        public int routingId;
        public SslInfo sslInfo;
        public boolean fatal;
    
        private NetworkServiceClientOnSslCertificateErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnSslCertificateErrorParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnSslCertificateErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnSslCertificateErrorParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnSslCertificateErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnSslCertificateErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnSslCertificateErrorParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.resourceType = decoder0.readInt(8);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.processId = decoder0.readInt(12);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.routingId = decoder0.readInt(24);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.fatal = decoder0.readBoolean(28, 0);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.sslInfo = SslInfo.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.resourceType, 8);
            
            encoder0.encode(this.processId, 12);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.routingId, 24);
            
            encoder0.encode(this.fatal, 28, 0);
            
            encoder0.encode(this.sslInfo, 32, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnSslCertificateErrorParams other = (NetworkServiceClientOnSslCertificateErrorParams) object;
            if (this.resourceType!= other.resourceType)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.url, other.url))
                return false;
            if (this.processId!= other.processId)
                return false;
            if (this.routingId!= other.routingId)
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.sslInfo, other.sslInfo))
                return false;
            if (this.fatal!= other.fatal)
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.resourceType);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.url);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.processId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.routingId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.sslInfo);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.fatal);
            return result;
        }
    }



    
    static final class NetworkServiceClientOnSslCertificateErrorResponseParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int netError;
    
        private NetworkServiceClientOnSslCertificateErrorResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public NetworkServiceClientOnSslCertificateErrorResponseParams() {
            this(0);
        }
    
        public static NetworkServiceClientOnSslCertificateErrorResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static NetworkServiceClientOnSslCertificateErrorResponseParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static NetworkServiceClientOnSslCertificateErrorResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            NetworkServiceClientOnSslCertificateErrorResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new NetworkServiceClientOnSslCertificateErrorResponseParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.netError = decoder0.readInt(8);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.netError, 8);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            NetworkServiceClientOnSslCertificateErrorResponseParams other = (NetworkServiceClientOnSslCertificateErrorResponseParams) object;
            if (this.netError!= other.netError)
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(this.netError);
            return result;
        }
    }

    static class NetworkServiceClientOnSslCertificateErrorResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final NetworkServiceClient.OnSslCertificateErrorResponse mCallback;

        NetworkServiceClientOnSslCertificateErrorResponseParamsForwardToCallback(NetworkServiceClient.OnSslCertificateErrorResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                NetworkServiceClientOnSslCertificateErrorResponseParams response = NetworkServiceClientOnSslCertificateErrorResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.netError);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class NetworkServiceClientOnSslCertificateErrorResponseParamsProxyToResponder implements NetworkServiceClient.OnSslCertificateErrorResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        NetworkServiceClientOnSslCertificateErrorResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer netError) {
            NetworkServiceClientOnSslCertificateErrorResponseParams _response = new NetworkServiceClientOnSslCertificateErrorResponseParams();

            _response.netError = netError;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_SSL_CERTIFICATE_ERROR_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
